// Generated by CoffeeScript 1.3.3
(function() {
  var CoffeeCollection, CoffeeModel, CoffeeRouter, CoffeeView, ExtendedCollection, ExtendedModel, ExtendedRouter, ExtendedView,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  CoffeeModel = (function(_super) {

    __extends(CoffeeModel, _super);

    function CoffeeModel() {
      return CoffeeModel.__super__.constructor.apply(this, arguments);
    }

    return CoffeeModel;

  })(Backbone.Model);

  CoffeeCollection = (function(_super) {

    __extends(CoffeeCollection, _super);

    function CoffeeCollection() {
      return CoffeeCollection.__super__.constructor.apply(this, arguments);
    }

    return CoffeeCollection;

  })(Backbone.Collection);

  CoffeeView = (function(_super) {

    __extends(CoffeeView, _super);

    function CoffeeView() {
      return CoffeeView.__super__.constructor.apply(this, arguments);
    }

    return CoffeeView;

  })(Backbone.View);

  CoffeeRouter = (function(_super) {

    __extends(CoffeeRouter, _super);

    function CoffeeRouter() {
      return CoffeeRouter.__super__.constructor.apply(this, arguments);
    }

    return CoffeeRouter;

  })(Backbone.Router);

  ExtendedModel = Backbone.Model.extend();

  ExtendedCollection = Backbone.Collection.extend();

  ExtendedView = Backbone.View.extend();

  ExtendedRouter = Backbone.Router.extend();

  describe('Backbone.debug', function() {
    describe('Hook Events', function() {
      beforeEach(function() {
        Backbone.debug.off().on('log:events');
        return spyOn(console, 'log');
      });
      it('can hook collections events', function() {
        var collection;
        collection = new Backbone.Collection();
        collection.trigger('reset');
        return expect(console.log).toHaveBeenCalled();
      });
      it('can hook model events', function() {
        var model;
        model = new Backbone.Model();
        model.trigger('change');
        return expect(console.log).toHaveBeenCalled();
      });
      it('can hook view events', function() {
        var view;
        view = new Backbone.View;
        view.trigger('test');
        return expect(console.log).toHaveBeenCalled();
      });
      return it('can hook router events', function() {
        var router;
        router = new Backbone.Router();
        router.trigger('test');
        return expect(console.log).toHaveBeenCalled();
      });
    });
    describe('Hook Syncing', function() {
      beforeEach(function() {
        Backbone.debug.off().on('log:sync');
        spyOn(console, 'log');
        return this.collection_mock = {
          url: 'example',
          trigger: function() {}
        };
      });
      return it('can hook Backbone.sync', function() {
        Backbone.sync('read', this.collection_mock);
        return expect(console.log).toHaveBeenCalled();
      });
    });
    describe('Track Objects', function() {
      beforeEach(function() {
        Backbone.debug.off().on('log:instances');
        return this.console = spyOn(console, 'log');
      });
      it('can save model instances to _objects', function() {
        var models;
        models = _.size(Backbone.debug._objects.Model);
        new CoffeeModel();
        new ExtendedModel();
        return expect(_.size(Backbone.debug._objects.Model)).toEqual(models + 2);
      });
      it('can save collection instances to _objects', function() {
        var collections;
        collections = _.size(Backbone.debug._objects.Collection);
        new CoffeeCollection();
        new ExtendedCollection();
        return expect(_.size(Backbone.debug._objects.Collection)).toEqual(collections + 2);
      });
      it('can save view instances to _objects', function() {
        var views;
        views = _.size(Backbone.debug._objects.View);
        new CoffeeView();
        new ExtendedView();
        return expect(_.size(Backbone.debug._objects.View)).toEqual(views + 2);
      });
      it('can save router instances to _objects', function() {
        var routers;
        routers = _.size(Backbone.debug._objects.Router);
        new CoffeeRouter();
        new ExtendedRouter();
        return expect(_.size(Backbone.debug._objects.Router)).toEqual(routers + 2);
      });
      it('can track a new collection', function() {
        new CoffeeCollection();
        new ExtendedCollection();
        return expect(this.console.callCount).toEqual(2);
      });
      it('can track a new model', function() {
        new CoffeeModel();
        new ExtendedModel();
        return expect(this.console.callCount).toEqual(2);
      });
      it('can track a new view', function() {
        new CoffeeView();
        new ExtendedView();
        return expect(this.console.callCount).toEqual(2);
      });
      return it('can track a new router', function() {
        new CoffeeRouter();
        new ExtendedRouter();
        return expect(this.console.callCount).toEqual(2);
      });
    });
    describe('Query Objects', function() {
      beforeEach(function() {
        return spyOn(console, 'log');
      });
      it('can return all collections', function() {});
      it('can return all models', function() {});
      it('can return all views', function() {});
      return it('can return all routers', function() {});
    });
    describe('Hooking Functionality', function() {
      it('can hook a top level Backbone function', function() {});
      return it('can hook a prototype Backbone function', function() {});
    });
    describe('console.log Functionality', function() {
      beforeEach(function() {
        return spyOn(console, 'log');
      });
      it('can log an event', function() {});
      return it('can log a sync', function() {});
    });
    return describe('Toggle Logging', function() {
      beforeEach(function() {
        return spyOn(console, 'log');
      });
      it('can turn off logging', function() {});
      it('can turn on logging', function() {});
      it('can turn off logging for a single option', function() {});
      return it('can turn on logging for a single option', function() {});
    });
  });

}).call(this);
